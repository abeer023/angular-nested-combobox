!function(e,n,o){"use strict";n.module("ui.nested.combobox",[]).constant("nestedComboBoxConfig",{options:{childrenParam:"children"}}).controller("NestedComboBoxController",["$scope","$element","$attrs","nestedComboBoxConfig","$timeout",function(e,o,t,l,i){var r=this;this.isOpen=!1,this.options=n.isDefined(e.options)?e.options:l.options,this.toggleOpen=function(){return e.controlDisabled?(this.isOpen=!1,!1):void(this.isOpen=!this.isOpen)},this.toggleBlur=function(){i(function(){r.isOpen=!1},200)},this.toggleFocus=function(){return e.controlDisabled?(this.isOpen=!1,!1):void(r.isOpen=!1)},e.findNode=function(o,t){var l,i,c;if(o===t.id)return t;if(n.isArray(t[r.options.childrenParam]))for(l=0;l<t[r.options.childrenParam].length;l+=1)if(i=t[r.options.childrenParam][l],c=e.findNode(o,i),c!==!1)return c;return!1}}]).directive("nestedComboBox",["$templateCache",function(e){var o=function(e,o,t,l){e.ngModelController=l;var i=null,r=!1;e.selectValue=function(o,t){return i===t.id?!0:(n.isFunction(e.changeEvent)&&e.changeEvent(t),e.ngModelController.$setViewValue(t),e.ngModelController.$render(),void(i=t.id))},e.$watch("model",function(o){if(e.collection){n.isArray(e.collection)||(e.collection=[e.collection]);for(var t=0;t<e.collection.length;t+=1)r=e.findNode(o,e.collection[t]),r!==!1&&(e.ngModelController.$setViewValue(r),e.ngModelController.$render(),n.isFunction(e.changeEvent)&&e.changeEvent(r))}}),e.$watchCollection("collection",function(){e.ngModelController.$setViewValue(),e.ngModelController.$render(),n.isFunction(e.changeEvent)&&e.changeEvent(r)})};return{restrict:"E",controller:"NestedComboBoxController",controllerAs:"gs",link:o,require:"ngModel",replace:!0,template:e.get("select-group.html"),scope:{collection:"=?",controlClass:"@?",controlDisabled:"=?",changeEvent:"=?",options:"=?",model:"=ngModel"}}}])}(window,window.angular),!function(e){try{e=angular.module("ui.nested.combobox")}catch(n){e=angular.module("ui.nested.combobox",[])}e.run(["$templateCache",function(e){e.put("select-group.html",'<div class="custom-select" data-ng-disabled="controlDisabled" data-ng-class="controlClass" data-ng-click="gs.toggleOpen()"><input data-ng-model="ngModelController.$modelValue.name" ng-blur="gs.toggleBlur()" ng-focus="gs.toggleFocus()" readonly="readonly"> <span><i class="icon-sort-down"></i></span><div class="list" data-ng-show="gs.isOpen"><ul><li data-ng-class="{\'active\':ngModelController.$modelValue.id === member.id}" data-ng-include="\'sub-level.html\'" data-ng-repeat="member in collection track by member.id"></li></ul></div></div>')}])}(),!function(e){try{e=angular.module("ui.nested.combobox")}catch(n){e=angular.module("ui.nested.combobox",[])}e.run(["$templateCache",function(e){e.put("sub-level.html",'<a href="" data-ng-click="selectValue(e,member)"><span>{{member.name}}</span></a><ul><li data-ng-class="{\'active\':ngModelController.$modelValue.id === member.id}" ng-repeat="member in member[gs.options.childrenParam] track by member.id" ng-include="\'sub-level.html\'"></li></ul>')}])}();